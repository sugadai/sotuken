{"version":3,"sources":["app.js"],"names":["require","text","express","session","bcrypt","type","app","cli","MySQLStore","stringify","Iconv","TIME","format","redirect","json","server","http","createServer","port","use","urlencoded","extended","client","mysql","createConnection","host","password","database","connect","err","log","stack","console","nodemailer","user","options","cookie","maxAge","store","resave","multipleStatements","sess","obj","sessionStore","rate_data","porter","createTransport","service","auth","PythonShell","pythonroad","promise","regeneratorRuntime","async","_context","prev","next","Promise","resolve","run","result","name","email","saveUninitialized","JSON","parse","record","Object","keys","length","user_id","id","data","rate_date","date","secure","time","query","results","Date","rate_time","getTime","seconds","d","newdate","Math","floor","sendMail","from","to","subject","concat","info","awrap","stop","req","res","locals","userId","username","deviceid","numlimit","set","__dirname","get","error","render","errors","post","body","push","plain","hash","compare","isEqual","destroy","devicecode","insertId","url","params","forEach","e","index","toLocaleString","csvString","str","io","csvStringObj","once","emit","csvStringObj2","header","quoted_string","listen"],"mappings":"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","file":"app.min.js","sourcesContent":["const { text } = require(\"express\");\nconst express = require(\"express\");\nconst session = require('express-session');\nconst MySQLStore= require('express-mysql-session')(session);//セッション情報をDBに保存\nconst bcrypt = require('bcrypt');\nconst { redirect, json, type } = require(\"express/lib/response\");\nconst app = express();\nconst mysql = require('mysql');\nconst cli = require(\"nodemon/lib/cli\");\nconst fs = require('fs');//ファイルを読み書きできる\nconst { stringify } = require('csv-stringify/sync');//データをCSVファイル化\nconst Iconv = require('iconv-lite');\nconst { time } = require(\"console\");\nconst { TIME } = require(\"mysql/lib/protocol/constants/types\");\nconst { format } = require(\"path\");\nconst e = require(\"express\");\nconst nodemailer = require('nodemailer');//メール送信ライブラリ\nconst http = require('http');\nconst server = http.createServer(app)\nconst io = require('socket.io')(server)\nconst port = 3000;\n\n\napp.use(express.static('public'));\napp.use(express.urlencoded({extended: false}));\n\n//DB接続\nconst client = mysql.createConnection({\n    host: '127.0.0.1',\n    user: 'root',\n    password: 'm.s.l_sd6016',\n    database: 'health',\n    multipleStatements: true\n});\n\n//DBと接続できなければerr\nclient.connect((err) => {\n  if (err) {\n    console.log('error connecting: ' + err.stack);\n    return;\n  }\n  console.log('success');\n});\n\n//express-mysql-sessionのmysqo接続\nconst options = {\n  host: '127.0.0.1',\n  port: 3306,\n  user: 'root',\n  password: 'm.s.l_sd6016',\n  database: 'my_database'\n};\n\n//my_databseのセッション情報を随時更新\nconst sessionStore = new MySQLStore(options);\n//セッション管理オプション\nconst sess = {\n  secret: 'secretsecretsecret',\n  cookie: { maxAge: 600000 },//セッション継続時間\n  store: new MySQLStore(options),\n  resave: false,\n  saveUninitialized: false,\n}\nif (app.get('env') === 'production') {\n  app.set('trust proxy', 1)\n  sess.cookie.secure = true//通信がhttpsの場合cookieを有効にする(本番環境良向き)\n}\napp.use(session(sess))\n\n\n//認証情報とnodemailerオブジェクトの生成\nconst porter = nodemailer.createTransport({\n  service : \"gmail\",\n  port : \"465\",\n  secure : \"true\",\n  auth :{\n    //自分のアドレスとgmailのアプリパスワード\n    user : 'dayoujianyuan091@gmail.com',\n    pass : \"xxlfdjfoilunnheo\"\n  }\n})\n\n// test.pyを呼び出すモジュール\nvar {PythonShell} = require('python-shell');\nlet obj;\nlet record,user_id,rate_data,rate_time,rate_date;\nasync function pythonroad(){\n    while(true){\n        let promise = new Promise((resolve) => {\n          //test.pyを実行\n            PythonShell.run('test.py', null,function(err, result) {\n              let name;\n              let email;\n              let flg = 0;\n              if (err) throw err;\n                obj = JSON.parse(result);\n                for(record=0;record<Object.keys(obj).length;record++){\n                  user_id = obj[record].id;\n                  rate_data = obj[record].data;\n                  rate_date = obj[record].date;\n                  rate_time = obj[record].time;\n                  client.query(\n                    'SELECT * FROM usertest WHERE deviceid = ?',\n                    [user_id],\n                    (err,results)=>{\n                      name = results[0]['username'];\n                      email = results[0]['email']\n                      //現在時刻の取得し5分マイナスした時刻を変数に入れる\n                      // const d = new Date();\n                      // const hours = d.getHours().toString().padStart(2,0)\n                      // const minuts = d.getMinutes().toString().padStart(2,0)\n                      // const secounds = d.getSeconds().toString().padStart(2,0)\n                      // var formatted = `\n                      // ${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()} ${hours}:${minuts-5}:${secounds}`;\n                      // console.log(formatted)\n                      if(results[0]['numlimit'] < rate_data){\n                        //現在時刻の取得し5分マイナスした時刻をフォーマットする\n                        const d = new Date();\n                        let date2 = rate_date + ' ' + rate_time;\n                        const d2 = new Date(date2);\n                        let newdate = d2.getTime();\n                        let datenow = d.getTime();\n                        // console.log(formatted)\n                        let seconds =  (datenow - newdate) / 1000;\n                        seconds = Math.floor(seconds)\n                        // console.log(seconds);\n                        if(300 >= seconds){\n                          porter.sendMail({\n                            from : \"dayoujianyuan091@gmail.com\",\n                            to : email,\n                            subject : \"お知らせ！\",\n                            text : `${name}さんは規定の心拍数を超えたことを知らせます。`\n                          },(err,info)=>{\n                            if(err){\n                                 console.log(err)\n                                 return\n                            }\n                            console.log('Ok send mail!!');\n                          })\n                        }\n                      }\n                    }\n                  ), \n                  console.log(`${record}個目のレコードのidは${user_id}・心拍数は${rate_data}・年月日は${rate_date}・時間は${rate_time}です。`);\n                  client.query(\n                    'INSERT INTO datatbl (deviceid,data,date,time) VALUE(?,?,?,?)',\n                    [user_id,rate_data,rate_date,rate_time],\n                    (error,result)=>{\n                      // console.log(`${record}個目のレコードのuser_idは${user_id}・rate_dataは${rate_data}・rate_dateは${rate_date}・rate_timeは${rate_time}です。`);\n                      // console.log(typeof(user_id))\n                    }\n                  )\n                }\n                // console.log(flg)\n                // if(flg === 1){\n                  // porter.sendMail({\n                  //   from : \"dayoujianyuan091@gmail.com\",\n                  //   to : email,\n                  //   subject : \"お知らせ！\",\n                  //   text : `${name}さんは規定の心拍数を超えたことを知らせます。`\n                  // },(err,info)=>{\n                  //   if(err){\n                  //        console.log(err)\n                  //        return\n                  //   }\n                  //   console.log('Ok send mail!!');\n                  // })\n                // }\n                resolve();\n            });\n        });\n        await promise;\n    }\n}\n\npythonroad();\n\n\n\n//全てのルーティング時にログインか非ログインかを判断するミドルウェア\napp.use((req,res,next)=>{\n  if (req.session.userId === undefined) {\n    console.log('ログインしていません');\n  } else {\n    console.log('ログインしています');\n    res.locals.userId = req.session.userId\n    res.locals.username = req.session.username\n    res.locals.email = req.session.email\n    res.locals.password = req.session.password\n    res.locals.deviceid = req.session.deviceid\n    // console.log(req.session.deviceid)\n    res.locals.numlimit = req.session.numlimit\n    // res.locals.password = req.session.password;\n  }\n  next();\n});\napp.set('views',__dirname+'/views');\n\n//テンプレートエンジン’ejs’を使用する宣言\napp.set(\"view engine\", \"ejs\");\n\n//トップページ表示\napp.get('/',(req,res,error) => {\n  console.log(error);\n  // if (req.session.views) {\n  //   req.session.views++;\n  // } else {\n  //   req.session.views = 1;\n  // }\n  // let views = req.session.views;\n  // console.log(views);\n  res.render('index');\n});\n\n\n\n//ログインページ表示\napp.get('/login',(req,res,error) => {\n  console.log(error);\n  res.render('login',{errors: [] });\n});\n\n//ログイン処理\napp.post('/login', (req, res ,next) => {\n  const email = req.body.email;\n  const password = req.body.password;\n  const errors = [];\n//空チェック機能\n  if(email === ''){\n    errors.push('メールアドレスが空です。');\n  }\n  if(password === ''){\n    errors.push('パスワードが空です。');\n  }\n  if(errors.length > 0){\n    res.render('login.ejs',{errors : errors});\n  }else{\n    next();\n  }\n},\n(req,res)=>{\n  const email = req.body.email;\n  client.query(\n    'SELECT * FROM usertest WHERE email = ?',\n    [email],\n    (error, results) => {\n      const errors = [];\n      if(results.length > 0){\n        const plain = req.body.password;\n        const hash = results[0].password;\n        // console.log(results);\n        //入力したパスワードをハッシュ化して比較\n        bcrypt.compare(plain,hash,(error,isEqual)=>{\n        if(isEqual){\n          //認証に成功すればセッション情報を保存し、ユーザーページにレダイレクトする\n          req.session.userId = results[0].id\n          req.session.email = results[0].email\n          req.session.username = results[0].username\n          req.session.deviceid = results[0].deviceid\n          req.session.numlimit = results[0].numlimit\n          // console.log(results[0].numlimit)\n          req.session.password = results[0].password;\n          // console.log('認証に成功しました');\n          res.redirect('/my');\n        }else{\n          //認証に失敗すればエラー配列と共にログインページにレスポンスする\n          errors.push('認証失敗しました。')\n          res.render('login',{errors:errors});\n        }\n        });\n      }else{\n        //入力したemailと一致しなければエラー配列と共にログインページにレスポンスする\n        errors.push('認証に失敗しました。');\n        res.render('login',{errors:errors});  \n      }\n    }\n  )\n}\n);\n\n\n//ログインページからトップページに戻る\napp.get('/return', (req, res) => {\n    req.session.destroy((error) => {\n      res.redirect('index');\n    });\n  });\n\n//ユーザーページを表示\napp.get('/my',(req,res)=>{\n    res.render(\"my\");\n});\n\n//新規登録ページを表示\napp.get('/signup',(req,res) => {\n    res.render(\"signup\",{errors: [] });\n});\n\n//新規登録処理\napp.post('/signup',(req,res,next)=>{\n  // //空チェック\n  // const username = req.body.username;\n  // const email = req.body.email;\n  // const password = req.body.password;\n  // const devicecode = req.body.devicecode;\n  // const errors = [];\n\n  // if(username === ''){\n  //   errors.push('ユーザー名が空です');\n  // }\n  // if(email === ''){\n  //   errors.push('メールアドレスが空です');\n  // }\n  // if(password === ''){\n  //   errors.push('パスワードが空です');\n  // }\n  // if(devicecode === ''){\n  //   errors.push('デバイスが空です。')\n  // }\n  // console.log(errors);\n  // if(errors.length > 0){\n  //   res.render('signup.ejs',{errors : errors});\n  // }else{\n  //   next();\n  // }\n  // },\n  // (req,res,next)=>{\n    // const devicecode = req.body.devicecode\n    // client.query(\n    //   'SELECT deviceid * FROM partienttbl WHEHE devicecode = ?',\n    //   [devicecode],\n    //   (err,results)=>{\n        \n    //   }\n    // )\n  // },\n  const devicecode = req.body.devicecode\n  client.query(\n    'SELECT deviceid FROM partienttbl WHERE devicecode = ?',\n    [devicecode],\n    (err,results)=>{\n      if(results.length > 0){\n        const deviceid = results[0].deviceid\n        const email = req.body.email;\n        client.query(\n          'SELECT * FROM usertest WHERE email = ? or deviceid = ?',\n          [email,deviceid],\n          (err,results)=>{\n            if(results.length > 0){\n              errors.push('このユーザーは既に登録済みです。')\n              console.log(errors)\n              res.render('signup',{errors : errors})\n            }else{\n              const username = req.body.username;\n              const password = req.body.password;\n              bcrypt.hash(password,10,(error,hash)=>{\n                client.query(\n                  'INSERT INTO usertest (username,email,password,deviceid) VALUES(?,?,?,?)',\n                  [username,email,hash,deviceid],\n                  (error,results)=>{\n                    //アカウント登録完了メールをユーザーに送る\n                    porter.sendMail({\n                      from : \"dayoujianyuan091@gmail.com\",\n                      to : email,\n                      subject : \"医療情報\",\n                      text : `${username}さんのユーザー登録が完了しました。`\n                    },(err,info)=>{\n                      if(err){\n                           console.log(err)\n                           return\n                      }\n                      console.log('Ok send mail!!');\n                    })\n                    // results[0].numlimit\n                    req.session.userId = results.insertId;\n                    req.session.username = username;\n                    req.session.email = email;\n                    req.session.password = password;\n                    req.session.deviceid = deviceid;\n                    req.session.numlimit = 100;\n                    res.redirect('/my');\n                  } \n                );\n              });\n            }\n          }\n        )\n      }else{\n        console.log('ユーザーコードが間違っています。')\n        errors.push('ユーザーコードが間違っています。')\n        res.render('signup',{errors : errors})\n      }\n    }\n  ) \n});\n\n//アカウント詳細ページを表示\napp.get('/acount',(req,res) => {\n  console.log(req.url)\n  res.render('acount');\n});\n\n//アカウント変更ページを表示\napp.get('/change', (req,res) => {\n  console.log(req.url)\n  res.render('change');\n})\n\n//アカウント変更処理\napp.post('/update/:id',(req,res,next)=>{\n  const username = req.body.username;\n  const email = req.body.email;\n  const password = req.body.password;\n  const deviceid = req.body.deviceid;\n  const numlimit = req.body.numlimit;\n  // console.log(numlimit)\n  const userId = req.params.id;\n  //パスワードのハッシュ化\n  if(password.length === 1){\n    client.query(\n      'UPDATE usertest SET username = ?, email = ?,deviceid = ?,numlimit = ? WHERE id = ?',\n      [username,email,deviceid,numlimit,userId],\n      (error,results)=>{\n        req.session.userId = userId;\n        req.session.email = email;\n        req.session.username = username;\n        req.session.password = password;\n        req.session.numlimit = numlimit;\n        res.redirect('/my');\n      }\n    )\n  }else{\n    bcrypt.hash(password,10,(error,hash)=>{\n      client.query(\n        'UPDATE usertest SET username = ?, email = ?, password = ?,deviceid = ?,numlimit = ? WHERE id = ?',\n        [username,email,hash,deviceid,numlimit,userId],\n        (error,results)=>{\n          console.log(results)\n          // console.log(results[0]);\n          req.session.userId = userId;\n          req.session.email = email;\n          req.session.username = username;\n          req.session.password = password;\n          req.session.numlimit = numlimit;\n          res.redirect('/my');\n        } \n      );\n    });\n  }\n});\n\n//アカウント削除処理\napp.post('/delete/:id',(req,res,next) =>{\n  console.log(req.params.id);\n  client.query(\n    'DELETE FROM usertest WHERE id = ?',\n    [req.params.id],\n    (error,results)=>{\n      res.redirect('/');\n    }\n  )\n})\n\n  \n//データをグラフで表示\napp.get('/data/:id',(req,res)=>{\n  console.log(req.url);\n  const deviceid = req.params.id;\n  client.query(\n    `SELECT * FROM datatbl WHERE deviceid = ? ;`,\n    [deviceid],\n    (err,results)=>{\n      results.forEach((e,index)=>{\n        results[index].date = e.date.toLocaleString();\n      })\n      if(err) throw err\n      //strigifyメソッドとparseメソッドでデータをcsvファイルにする\n      const csvString = JSON.stringify(results);\n      const str = JSON.parse(csvString);\n      str.forEach((data,index)=>{\n        str[index].date =(data.date.substr(0,10));\n      })\n      //csvファイル化\n      const csvStringObj = stringify(str,{\n        header:true,\n        quoted_string:false\n      })\n      // console.log(str)\n\n      io.once(\"connect\", (socket) => {\n        console.log(\"ユーザーが接続しました\");\n        let data = 'test';\n        // socket.on('emit',(msg)=>{\n        //   console.log(msg)\n        // });\n        io.emit('datas',csvStringObj);\n      });\n      // const csvStringSjis = Iconv.encode(csvStringObj,'Shift.JIS');\n      // fs.writeFileSync('./public/result.csv',csvStringSjis); \n      client.query(\n        'SELECT numlimit FROM usertest WHERE deviceid = ?',\n        [deviceid],\n        (err,results)=>{\n          req.session.numlimit = results[0].numlimit\n          // str.push(results);\n          // console.log(str[str.length-1])\n          const csvStringObj2 = stringify(results,{\n            header:true,\n            quoted_string:false\n          })\n          \n          io.once(\"connection\", (socket) => {\n            console.log(\"ユーザーが接続しました\");\n            // socket.on('emit',(msg)=>{\n              console.log(csvStringObj2)\n            // });\n            io.emit('limit',csvStringObj2);\n          });\n          // const csvStringSjis2 = Iconv.encode(csvStringObj2,'Shift.JIS');\n          // // console.log(csvStringObj,csvStringObj2)\n          // fs.writeFileSync('./public/limit.csv',csvStringSjis2); \n        }\n      )\n    }\n  ),\n  \n  client.query(\n    'SELECT data FROM datatbl WHERE data = (SELECT MAX(data) FROM datatbl) ; SELECT data FROM datatbl WHERE data = (SELECT MIN(data) FROM datatbl) ',\n    (error,results)=>{\n      if(error) throw error\n      // console.log(results)\n      res.render('data',{result : results})\n    }\n  )  \n});\n\n\n\n\n//トップページ戻り保存していたセッション情報を破棄する(ログアウト)\napp.get('/logout',(req,res)=>{\n  req.session.destroy((error)=>{\n    res.redirect('/');\n  });\n});\n\n//指定したポート番号でサーバ構築\nserver.listen(port,()=>{\n    console.log(\"server start!!\");\n});\n"]}